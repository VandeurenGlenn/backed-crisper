{"version":3,"file":"crisper-es.js","sources":["../src/crisper.js"],"sourcesContent":["'use strict';\r\nconst path = require('path');\r\nconst {readFile, mkdir, writeFile} = require('fs');\r\nconst parse5 = require('parse5');\r\n\r\nconst isTextNode = (node) => {\r\n  return Boolean(node.nodeName === '#text');\r\n}\r\n\r\nconst resolvePath = source => {\r\n  return path.win32.resolve(process.cwd(), source);\r\n}\r\n\r\nconst relativePath = source => {\r\n  return path.win32.relative(process.cwd(), source);\r\n}\r\n\r\n/**\r\n * @param {string} source A path to construct the destintation path from\r\n * @param {string} dest A destination path to join with source path\r\n *\r\n * @example\r\n * distPath('src/html/index.html', 'dist') // returns dist/html/index.html\r\n */\r\nconst distPath = (source, dest) => {\r\n  if (dest === null) {\r\n    dest = 'dist';\r\n  }\r\n  return path.win32.join(path.win32.dirname(source), dest, path.win32.basename(source))\r\n}\r\n\r\nconst write = (destination, content) => {\r\n  writeFile(destination, content, error => {\r\n    if (error) {\r\n      if (error.code === 'ENOENT') {\r\n        const relative = relativePath(destination);\r\n        const parts = path.win32.dirname(relative).split(path.sep);\r\n        let prepath = '';\r\n\r\n        for (let part of parts) {\r\n          prepath = path.join(prepath, part);\r\n          mkdir(prepath, error => {\r\n            return console.error(error);\r\n          });\r\n        }\r\n        return write(destination, content);\r\n      } else {\r\n        console.log(error);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nconst writeJs = (path, content) => {\r\n  write(path, content);\r\n}\r\n\r\nconst resolvePaths = (source, html, js, dist) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const duplicates = {html: false, js: false};\r\n      if (html === source) {\r\n        html = distPath(html, dist);\r\n      }\r\n      if (js === source) {\r\n        js = distPath(js, dist);\r\n      }\r\n      source = resolvePath(source);\r\n\r\n      html = html || distPath(source, dist);\r\n      js = js || distPath(source, dist).replace('.html', '.js');\r\n\r\n      resolve({\r\n        source: source,\r\n        html: resolvePath(html),\r\n        js: resolvePath(js)\r\n      });\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\nconst getFileContent = (source, contents) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (contents) {\r\n      return resolve(contents);\r\n    }\r\n    readFile(source, 'utf-8', (error, content) => {\r\n      if (error) {\r\n        reject(error);\r\n      } else {\r\n        resolve(content);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nconst transformParse = string => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!string.includes('<html>')) {\r\n      string = '<!DOCTYPE html><html><head></head><body>' + string + '</body></html>';\r\n    }\r\n    try {\r\n      resolve(parse5.parse(string));\r\n    } catch (error) {\r\n      reject(error)\r\n    }\r\n  })\r\n}\r\n\r\nconst getChildNodes = document => {\r\n  return new Promise(function(resolve, reject) {\r\n    try {\r\n      resolve(document.childNodes[1].childNodes[1].childNodes);\r\n    } catch (error) {\r\n      reject(error)\r\n    }\r\n  });\r\n}\r\n\r\nclass CrisperBase {\r\n  constructor(value, type) {\r\n    this[type] = value;\r\n    this.type = type;\r\n  }\r\n\r\n  get childNodes() {\r\n    if (this.type === 'node') {\r\n      return this.node.childNodes;\r\n    }\r\n    return this[this.type].content.childNodes;\r\n  }\r\n\r\n  get content() {\r\n    let content = '';\r\n    for (let child of this.childNodes) {\r\n      if (isTextNode(child)) {\r\n        content += child.value;\r\n      }\r\n    }\r\n    return content.trim();\r\n  }\r\n\r\n  indexOfAttribute(attribute, node = {}) {\r\n    try {\r\n      const attrs = node.attrs || this[this.type].attrs;\r\n      for (let attr of attrs) {\r\n        if (attr.name.toLowerCase() === attribute.toLowerCase()) {\r\n          return attrs.indexOf(attr);\r\n        }\r\n      }\r\n      return -1;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  hasAttribute(attribute, node) {\r\n    return Boolean(this.indexOfAttribute(attribute, node || this[this.type]) !== -1);\r\n  }\r\n\r\n  getAttribute(attribute) {\r\n    attribute = this[this.type].attrs[this.indexOfAttribute(attribute)].value;\r\n    if (attribute === '') {\r\n      attribute = null;\r\n    }\r\n    return attribute;\r\n  }\r\n\r\n  setAttribute(name, value) {\r\n    if (this.hasAttribute(name))\r\n      this[this.type].attrs[this.indexOfAttribute(name)].value = value;\r\n    else\r\n      this[this.type].attrs.push({\r\n        name: name,\r\n        value: value\r\n      });\r\n  }\r\n\r\n  serializeAttribute(name, value) {\r\n    return `${name}=\"${value}\"`;\r\n  }\r\n\r\n  serializeAttributes() {\r\n    let attributes = '';\r\n    for (let attr of this[this.type].attrs) {\r\n      attributes += ` ${this.serializeAttribute(attr.name, attr.value)}`;\r\n    }\r\n    return attributes;\r\n  }\r\n}\r\n\r\nclass CrisperNode extends CrisperBase {\r\n  constructor(node) {\r\n    super(node, 'node');\r\n  }\r\n}\r\n\r\nclass CrisperTemplate extends CrisperBase {\r\n  constructor(template) {\r\n    super(template, 'template');\r\n  }\r\n\r\n  get id() {\r\n    return this.getAttribute('id');\r\n  }\r\n\r\n  set id(value) {\r\n    this.setAttribute('id', value);\r\n  }\r\n\r\n  get outerHTML() {\r\n    const attributes = this.serializeAttributes();\r\n    return `<template${attributes}>\\n  ${this.content}\\n</template>`\r\n  }\r\n}\r\n\r\n/**\r\n * @module backed-crisper\r\n * by default uses the source as output, so index.html, becomes index.js, index.css & index.html\r\n *\r\n * @param {string} source The file to read\r\n * @param {object} opts\r\n * @param {string} opts.html The ouput path for html\r\n * @param {string} opts.html The ouput path for js\r\n * @param {string} opts.dist A path to set for writing criped files to\r\n */\r\nmodule.exports = (source = null, opts = {html: null, js: null, dist: null, contents: null}) => {\r\n  if (source === null) {\r\n    return console.warn('source::undefined');\r\n  }\r\n\r\n  async function run() {\r\n    const paths = await resolvePaths(source, opts.html, opts.js, opts.dist);\r\n    const content = await getFileContent(paths.source, opts.contents);\r\n    const document = await transformParse(content);\r\n    const childNodes = await getChildNodes(document);\r\n\r\n    let script = null;\r\n    let template = null;\r\n\r\n    for (let child of childNodes) {\r\n      if (!isTextNode(child)) {\r\n        if (child.tagName && child.tagName === 'script') {\r\n          let el = new CrisperNode(child);\r\n          if (!el.hasAttribute('src')) {\r\n            script = el;\r\n          }\r\n        } else if (child.tagName && child.tagName === 'template') {\r\n          template = new CrisperTemplate(child);\r\n        }\r\n      }\r\n    }\r\n\r\n    let scriptTag = null;\r\n    if (script) {\r\n      const relative = relativePath(paths.js);\r\n      scriptTag = `<script src=\"${relative}\"></script>`;\r\n      writeJs(paths.js, script.content);\r\n    }\r\n    if (template) {\r\n      if (template.id === null)\r\n        template.id = path.win32.basename(paths.source, '.html');\r\n        const outerHTML = template.outerHTML;\r\n        let content = scriptTag ? `${scriptTag}\\n\\n${outerHTML}` : outerHTML;\r\n        write(paths.html, content)\r\n      }\r\n    }\r\n\r\n  run();\r\n};\r\n"],"names":["path","require","readFile","mkdir","writeFile","parse5","isTextNode","node","Boolean","nodeName","resolvePath","source","win32","resolve","process","cwd","relativePath","relative","distPath","dest","join","dirname","basename","write","destination","content","error","code","parts","split","sep","prepath","part","console","log","writeJs","resolvePaths","html","js","dist","Promise","reject","duplicates","replace","getFileContent","contents","transformParse","string","includes","parse","getChildNodes","document","childNodes","CrisperBase","value","type","child","trim","attribute","attrs","attr","name","toLowerCase","indexOf","indexOfAttribute","hasAttribute","push","attributes","serializeAttribute","CrisperNode","CrisperTemplate","template","id","getAttribute","setAttribute","outerHTML","serializeAttributes","module","exports","opts","warn","run","paths","script","tagName","el","scriptTag"],"mappings":"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"}